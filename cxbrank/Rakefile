$LOAD_PATH << '../comrank/lib'

require 'yaml'
require 'csv'
require 'rubygems'
require 'active_record'
require 'sinatra/activerecord'
require 'sinatra/activerecord/rake'
require 'cxbrank/const'
require 'cxbrank/music'
require 'cxbrank/event'

env = (ENV['ENV'] ? ENV['ENV'].to_sym : :development)
ActiveRecord::Base.configurations = YAML.load_file(CxbRank::DATABASE_FILE)
ActiveRecord::Base.establish_connection(env)

namespace :cxbrank do
  desc 'initialize music master'
  task :init_master do
    CSV.open('./db/master/musics.tsv', 'r', "\t") do |row|
      music = CxbRank::Music.find(:first, :conditions => {:lookup_key => row[0]})
      unless music
        music = CxbRank::Music.new
        music.lookup_key = row[0]
      end
      music.text_id = row[0]
      music.number = row[1]
      music.title = row[2]
      music.subtitle = row[3]
      music.sort_key = row[4]
      music.esy_level = row[5]
      music.esy_notes = row[6]
      music.std_level = row[7]
      music.std_notes = row[8]
      music.hrd_level = row[9]
      music.hrd_notes = row[10]
      music.mas_level = row[11]
      music.mas_notes = row[12]
      music.unl_level = row[13]
      music.unl_notes = row[14]
      music.limited = row[15]
      music.hidden = row[16]
      music.display = row[17]
      music.added_at = row[18]
      music.event = row[19]
      music.save!
    end

    CSV.open('./db/master/monthlies.tsv', 'r', "\t") do |row|
      music_id = CxbRank::Music.find(:first, :conditions => {:text_id => row[0]}).id
      monthly = CxbRank::Monthly.find(:first, :conditions => {:music_id => music_id, :span_s => row[1]})
      unless monthly
        monthly = CxbRank::Monthly.new
        monthly.music_id = music_id
        monthly.span_s = row[1]
      end
      monthly.span_e = row[2]
      monthly.save!
    end

    CSV.open('./db/master/legacy_charts.tsv', 'r', "\t") do |row|
      music_id = CxbRank::Music.find(:first, :conditions => {:text_id => row[0]}).id
      chart = CxbRank::LegacyChart.find(:first, :conditions => {:music_id => music_id, :span_s => row[1]})
      unless chart
        chart = CxbRank::LegacyChart.new
        chart.music_id = music_id
        chart.span_s = row[1]
      end
      chart.span_e = row[2]
      chart.esy_level = row[3]
      chart.esy_notes = row[4]
      chart.std_level = row[5]
      chart.std_notes = row[6]
      chart.hrd_level = row[7]
      chart.hrd_notes = row[8]
      chart.mas_level = row[9]
      chart.mas_notes = row[10]
      chart.unl_level = row[11]
      chart.unl_notes = row[12]
      chart.save!
    end

    CSV.open('./db/master/events.tsv', 'r', "\t") do |row|
      event = CxbRank::Event.find(:first, :conditions => {:text_id => row[0], :section => row[1]})
      unless event
        event = CxbRank::Event.new
        event.text_id = row[0]
        event.section = row[1]
      end
      event.title = row[2]
      event.span_s = row[3]
      event.span_e = row[4]
      event.save!
    end

    CSV.open('./db/master/event_musics.tsv', 'r', "\t") do |row|
      event_id = CxbRank::Event.find(:first, :conditions => {:text_id => row[0], :section => row[1]}).id
      event_music = CxbRank::EventMusic.find(:first, :conditions => {:event_id => event_id, :seq => row[2]})
      unless event_music
        event_music = CxbRank::EventMusic.new
        event_music.event_id = event_id
        event_music.seq = row[2]
      end
      music_id = CxbRank::Music.find(:first, :conditions => {:text_id => row[3]}).id
      event_music.music_id = music_id
      event_music.save!
    end
  end

  desc 'make insert sql'
  task :make_insert_sql do
  end

  desc 'make update sql'
  task :make_update_sql do
  end
end
